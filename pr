/**
 * SSL Certificate Generation:
 * - Creates a self-signed SSL certificate dynamically at runtime using `selfsigned`.
 * - Common Name (CN): local.welcome.standardlife.co.uk.
 * - Used for handling HTTPS requests in the reverse proxy.
 * - No manual configuration required; the certificate is generated automatically.
 */
const { cert, privateKey } = generate([
  { name: 'commonName', value: 'local.welcome.standardlife.co.uk' }
]);


local.welcome.standardlife.co.uk

/**
 * SSL Certificate Generation:
 * - Uses the `selfsigned` package to generate a self-signed SSL certificate dynamically.
 * - The `generate` method is called with an option to set the Common Name (CN) as `local.welcome.standardlife.co.uk`.
 * - The generated certificate and private key are used to enable HTTPS communication for the reverse proxy.
 */
const { cert, privateKey } = generate([
  { name: 'commonName', value: 'local.welcome.standardlife.co.uk' }
]);


Here's the updated Reverse Proxy Server task with an added comment explaining its role in notifying dependent tasks:

{
  "label": "Reverse Proxy Server", // Task to start the HTTPS reverse proxy server
  "type": "shell",
  "command": "pnpm",
  "args": ["run", "--filter=scripts", "proxyServer"], // Runs the proxyServer script from the scripts package
  "isBackground": true, // Keeps the process running in the background, allowing other tasks to start
  "problemMatcher": {
    "pattern": {
      "regexp": "HTTPS Reverse Proxy running at .*" // Detects when the proxy server has started
    }
  },
  "background": {
    "activeOnStart": true, // Marks the task as active when it starts
    "beginsPattern": "Starting Reverse Proxy Server...", // Recognizes when the proxy server begins initializing
    "endsPattern": "HTTPS Reverse Proxy running at .*" // Marks task as complete once the proxy server is fully running
  }
}

Additional Clarification

Problem Matcher: Helps notify dependent tasks that this proxy server has started successfully and is running.

Runs in Background: Ensures that frontend and backend servers dependent on this proxy can start without waiting indefinitely.


This makes it explicit that other tasks depending on the proxy will recognize when it starts and completes.

Let me know if you need more refinements!

PR Title

feat(tasks): Integrate Reverse Proxy Server into Task Automation


---

PR Description

This PR enhances task automation by integrating the Reverse Proxy Server into VS Code tasks and launch configurations for improved dependency management.

Changes Implemented:

1. Added a dedicated "Reverse Proxy Server" task in tasks.json:

Runs the proxy server script in the background.

Uses a problem matcher to notify dependent tasks when the proxy starts and completes.

Ensures other servers (frontend/backend) can start without waiting indefinitely.



2. Linked Reverse Proxy to Frontend Task:

Dashboard Web task now depends on the Reverse Proxy Server, ensuring it starts before launching the frontend.



3. Attached Reverse Proxy to Backend & Mock Servers (launch.json):

Prelaunch task added to backend and mock backend servers to start the proxy automatically in debug mode.




Feature Validation & Testing

âœ… Reverse Proxy Server starts successfully in the background.
âœ… Frontend (Dashboard Web) launches after the proxy server is running.
âœ… Backend & Mock Backend servers initialize with the proxy via preLaunchTask in debug mode.
âœ… Problem matcher correctly detects when the proxy starts and completes, ensuring dependent tasks recognize its state.


---

This PR ensures that the proxy server seamlessly integrates into the local development workflow, improving automation and consistency. ðŸš€

Let me know if you need any refinements!



