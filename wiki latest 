Ember Dashboard E2E Test Automation - Wiki

Overview

This document outlines the end-to-end (E2E) test automation setup for Ember Dashboard, built using WebdriverIO (WDIO). It validates UI contents, interactions, and user flows while leveraging Mock SLAL Server Data.


---

Key Implementations

1Ô∏è‚É£ Test Architecture

Framework: WebdriverIO (WDIO) with Mocha.

Test Structure:

Selectors & Test Execution in Separate Files ‚Üí Improves maintainability.

No Direct Web Elements Used ‚Üí Eases future mobile test integration.


Test Coverage:

Page contents (text, elements, values).

Navigation, button clicks, form interactions.

Data validation against mock API responses.




---

2Ô∏è‚É£ Logging, Reporting & Debugging

‚úÖ Custom Logger (WDIO Reporter)

Stores execution logs in a human-readable format under logs/YYYY-MM-DD/wdio-e2e.log.

Logs are grouped by test suite, execution status, and errors.


‚úÖ Screenshot Capturing

Captures screenshots only for failed tests via the afterTest hook.

Organizes them under screenshots/success/ & screenshots/failure/.


‚úÖ Allure Report Integration

Generates a single-page HTML report (--single-file flag).

Attaches failure screenshots using addAttachment().



---

3Ô∏è‚É£ CI/CD Pipeline (GitHub Actions)

Triggers:

Manual execution via workflow dispatch.

Push to Main Branch.

Nightly execution (10 PM Cron Job).


Pipeline Steps:

1. Checkout repository.


2. Start Frontend & Mock SLAL Server.


3. Execute E2E Test Suite.


4. Upload Allure Reports & Screenshots as artifacts.





---

4Ô∏è‚É£ Technical Flow Summary

1Ô∏è‚É£ Test Execution:

Loads Ember Dashboard, authenticates via Mock SLAL Server, and validates elements & interactions.


2Ô∏è‚É£ Logging & Debugging:

Custom Logger records execution details.

Screenshots captured for failures.

Allure Report integrates screenshots & test logs.


3Ô∏è‚É£ CI/CD Execution:

Pipeline ensures server readiness before running tests.

After execution, reports and screenshots are stored as artifacts.



---

Future Enhancements

Expand test coverage for additional flows.

Optimize report insights & test stability.

Explore mobile test automation for React Native.



---

Conclusion

This setup ensures a scalable, structured, and reliable E2E testing framework for Ember Dashboard. It enables quick debugging, structured reporting, and smooth CI/CD integration. üöÄ


Ember Dashboard E2E Test Automation - Technical Wiki

This document provides a detailed breakdown of the E2E test automation setup for Ember Dashboard, implemented using WebdriverIO (WDIO). It explains the test structure, logging mechanisms, screenshot handling, Allure reporting, and CI/CD pipeline integration.


---

1Ô∏è‚É£ Test Framework & Structure

Framework & Configuration

Test Runner: WebdriverIO (WDIO)

Test Framework: Mocha

Selectors & Test Execution:

Selectors stored separately from test execution files for better maintainability.

No direct Web Elements used ‚Üí Easier migration to mobile test automation.


Mock SLAL Server:

Serves as the backend for test data, ensuring consistency in validations.



Test Coverage

UI Validation: Elements, text content, and key data points.

User Interaction Testing: Button clicks, navigation flows, authentication.

Value Assertion: Data retrieved from API vs. displayed on UI.



---

2Ô∏è‚É£ Logging & Debugging - Custom Logger

‚úÖ Custom WDIO Reporter Setup

Integrated into WDIO as a custom reporter by extending @wdio/reporter.

Logs stored in a structured folder format ‚Üí logs/YYYY-MM-DD/wdio-e2e.log.

Automatic log grouping by execution date:

Folder Creation: Ensured using fs.existsSync() & fs.mkdirSync().

File Handling: Logged using appendFileSync() from Node‚Äôs fs module.


Logged Events:

Test start, test pass, test fail (with errors), and test end.



WDIO Configuration for Custom Logger

Added to reporters array in wdio.conf.ts.

Uses this.write() method for structured log formatting.



---

3Ô∏è‚É£ Screenshot Capture & Management

‚úÖ Implementation Using WDIO Hooks

Hooks Used:

onPrepare: Deletes & recreates screenshots folder before test execution.

afterTest: Captures screenshots on failure.


Folder Structure:

Screenshots saved in screenshots/

Grouped by status ‚Üí screenshots/success/ & screenshots/failure/.


Implementation Details:

Used browser.saveScreenshot() inside afterTest hook.

File Naming Format ‚Üí testName-timestamp.png.

Ensures clean execution by deleting screenshots folder at the start of each test run.




---

4Ô∏è‚É£ Allure Report Integration

‚úÖ Allure Report Configuration in WDIO

Added to reporters array in wdio.conf.ts:

reporters: [
  'spec',
  ['allure', { outputDir: 'allure-results', disableWebdriverStepsReporting: true, disableWebdriverScreenshotsReporting: false }]
];

Folder Management:

onPrepare hook deletes previous results (allure-results & allure-report) before execution.

onComplete hook generates the final report using:

execSync('npx allure generate --single-file --clean allure-results');

Single HTML report mode used (--single-file) for a lightweight approach.

If not running in CI, the report automatically opens in the browser.



‚úÖ Screenshot Attachments for Failed Tests

Implemented using addAttachment() in @wdio/allure-reporter.

Failure screenshots embedded inside the Allure report.



---

5Ô∏è‚É£ CI/CD Pipeline (GitHub Actions Integration)

‚úÖ Triggers

Manual trigger ‚Üí Workflow dispatch.

On push to main branch.

Scheduled nightly execution (10 PM Cron Job).


‚úÖ Pipeline Steps
1Ô∏è‚É£ Checkout Repository
2Ô∏è‚É£ Start Frontend & Mock SLAL Server
3Ô∏è‚É£ Run E2E Test Suite
4Ô∏è‚É£ Upload Artifacts (Allure Reports & Screenshots)

‚úÖ Ensuring Frontend Readiness

Introduced wait time before test execution to ensure the server is ready.

Validates if the service is up by checking its response status.



---

6Ô∏è‚É£ Summary of Test Execution Flow

1Ô∏è‚É£ Test Initialization

Launches Ember Dashboard with mock authentication.

Ensures cookies & UI elements load properly.


2Ô∏è‚É£ Test Execution & Logging

Custom Logger records test progress & failures.

Screenshots captured for failed test cases.


3Ô∏è‚É£ Post-Execution Reporting

Allure Report generated with test logs and failure screenshots.

Logs structured by date, ensuring easy debugging.

Test results uploaded as artifacts in CI/CD.



---

Future Enhancements

Expand test coverage for additional user interactions.

Further optimize Allure Report structure.

Investigate mobile test automation feasibility.



---

Conclusion

This setup ensures scalability, automation reliability, and smooth debugging for Ember Dashboard‚Äôs E2E tests. üöÄ



{
  "$schema": "https://turbo.build/schema.json",
  "pipeline": {
    "web": {
      "dependsOn": ["^build"],
      "outputs": []
    },
    "e2e-test": {
      "dependsOn": ["build"],
      "outputs": []
    },
    "serve:mock": {
      "outputs": []
    },
    "serve:local": {
      "outputs": []
    }
  }
}


