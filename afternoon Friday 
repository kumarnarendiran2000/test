class EmberDashboardPage {
    async navigateAndVerifyButtons(mockData = false): Promise<void> {
        const originalWindow = await browser.getWindowHandle();

        for (const button of buttonSelectors) {
            const buttonElement = $(`[aria-label='${button.ariaLabel}']`);
            await waitForElementToBeDisplayed(buttonElement);

            // Skip clicks for specific buttons in mock mode
            if (mockData && ['Find my pensions button', 'View Money Mindset Rewards button'].includes(button.ariaLabel)) {
                continue;
            }

            await buttonElement.click();

            // If button is Provider Details, handle expansion + anchor click
            if (button.ariaLabel === 'Provider Details') {
                const providerInfoLink = $("a[title*='Find out more information']");
                await waitForElementToBeDisplayed(providerInfoLink);
                await providerInfoLink.click();
            }

            // Common logic for handling new tabs
            if (button.shouldOpenNewTab || button.ariaLabel === 'Provider Details') {
                await browser.waitUntil(
                    async () => (await browser.getWindowHandles()).length > 1,
                    { timeout: 10000 }
                );

                const handles = await browser.getWindowHandles();
                await browser.switchWindow(handles[handles.length - 1]);

                await waitForPageLoadWithRefresh();
                expect(await browser.getUrl()).toContain(button.expectedUrlContains);

                await browser.closeWindow();
                await browser.switchWindow(originalWindow);
            } else {
                // Verification for buttons that do not open a new tab
                if (button.waitForSelector) {
                    await waitForElementToBeDisplayed($(button.waitForSelector));
                }
                expect(await browser.getUrl()).toContain(button.expectedUrlContains);
            }
        }
    }
}

If you want to select the amount value (¬£179,090) without relying on specific web elements like div, span, or class names, you can use text-based XPath or ARIA attributes (if available).

Approaches to Select the Amount

1Ô∏è‚É£ Text-Based XPath (Without Using Elements Directly)

If the amount always follows a specific label like "Total value", you can use:

//*[contains(text(), 'Total value')]/following-sibling::*[1]

‚úÖ This finds any element that contains "Total value" and selects the next sibling, which is likely the amount.

2Ô∏è‚É£ Using Parent-Child Structure (Without Element Type)

If you know the amount is inside a known section, but don‚Äôt want to rely on specific div or span elements:

//*[contains(text(), 'Your pension')]/following::*[contains(text(), '¬£')]

‚úÖ This finds "Your pension" and then looks forward for any element that contains "¬£" (amounts typically start with ¬£).

3Ô∏è‚É£ Using ARIA Labels or Data Attributes

Check if the amount has an accessible name:

Look for attributes like aria-label, data-*, or role

Example XPath:

//*[@aria-label='Total value']

‚úÖ This is preferred if available, as it‚Äôs more stable than text-based XPath.


Which One Should You Use?

1. Check for ARIA attributes (aria-label, role) ‚Üí Best for accessibility & stability.


2. Use text-based XPath (contains(text(), 'Total value')/following-sibling::*[1]) ‚Üí If ARIA is not available.


3. Avoid class names or deep structures since they may change over time.



Would you like to verify this in your test? üöÄ

