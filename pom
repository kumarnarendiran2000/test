Got it! Here's a refined Page Object Model (POM) structure based on what you need:

DG Dashboard (Opens after login)

Ember Dashboard (Opens via URL without login, but has different selectors)

Login Page (Handles authentication)

Selectors (Separate for DG Dashboard and Ember Dashboard)

Reusable Helper Functions (For wait conditions, window handling)



---

üìÇ Folder Structure

tests/
‚îÇ‚îÄ‚îÄ e2e/
‚îÇ   ‚îú‚îÄ‚îÄ specs/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ testScenario.e2e.ts  <-- Calls all page objects, main test file
‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ loginPage.ts  <-- Handles login to DG Dashboard
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dgDashboardPage.ts  <-- Extracts values from DG Dashboard
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ emberDashboardPage.ts  <-- Opens Ember Dashboard from a URL & extracts values
‚îÇ   ‚îú‚îÄ‚îÄ selectors/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dgDashboardSelectors.ts  <-- Stores DG Dashboard selectors
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ emberDashboardSelectors.ts  <-- Stores Ember Dashboard selectors
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ helpers.ts  <-- Reusable functions (waitForElement, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ testConfig.ts  <-- Stores test users, base URLs, and credentials


---

1Ô∏è‚É£ Login Page (loginPage.ts)

import { expect } from '@wdio/globals';

class LoginPage {
    get usernameField() { return $('#userid'); }
    get passwordField() { return $('#password'); }
    get submitButton() { return $('#submit'); }
    get otpCodeField() { return $('#OTPcode'); }
    get verifyCodeButton() { return $('#verifyCode'); }

    async openLoginPage(url: string) {
        await browser.url(url);
    }

    async login(username: string, password: string) {
        await this.usernameField.setValue(username);
        await this.passwordField.setValue(password);
        await this.submitButton.click();

        const otpHeading = await $('//h3[contains(.,"Enter verification code")]');
        if (await otpHeading.isDisplayed()) {
            await this.otpCodeField.setValue('000000');
            await this.verifyCodeButton.click();
        }
    }
}

export default new LoginPage();


---

2Ô∏è‚É£ DG Dashboard Page (dgDashboardPage.ts)

import { expect } from '@wdio/globals';
import DgDashboardSelectors from '../selectors/dgDashboardSelectors';

class DgDashboardPage {
    async waitForDashboard() {
        await expect($(DgDashboardSelectors.totalValue)).toBeDisplayed();
    }

    async extractValues() {
        return {
            totalValue: await $(DgDashboardSelectors.totalValue).getText(),
            totalTransferValue: await $(DgDashboardSelectors.totalTransferValue).getText(),
            growthValue: await $(DgDashboardSelectors.growthValue).getText(),
            savingsValue: await $(DgDashboardSelectors.savingsValue).getText(),
            insuranceValue: await $(DgDashboardSelectors.insuranceValue).getText(),
            taxFreeCashRemaining: await $(DgDashboardSelectors.taxFreeCashRemaining).getText(),
            totalWithdrawValue: await $(DgDashboardSelectors.totalWithdrawValue).getText(),
        };
    }
}

export default new DgDashboardPage();


---

3Ô∏è‚É£ Ember Dashboard Page (emberDashboardPage.ts)

import { expect } from '@wdio/globals';
import EmberDashboardSelectors from '../selectors/emberDashboardSelectors';

class EmberDashboardPage {
    async openDashboard(url: string) {
        await browser.newWindow(url, { type: 'tab' });
    }

    async waitForDashboard() {
        await expect($(EmberDashboardSelectors.totalValue)).toBeDisplayed();
    }

    async extractValues() {
        return {
            totalValue: await $(EmberDashboardSelectors.totalValue).getText(),
            totalTransferValue: await $(EmberDashboardSelectors.totalTransferValue).getText(),
            totalPayment: await $(EmberDashboardSelectors.totalPayment).getText(),
            latestPayment: await $(EmberDashboardSelectors.latestPayment).getText(),
            investmentGrowth: await $(EmberDashboardSelectors.investmentGrowth).getText(),
        };
    }
}

export default new EmberDashboardPage();


---

4Ô∏è‚É£ DG Dashboard Selectors (dgDashboardSelectors.ts)

export default {
    totalValue: '//p[contains(text(), "Total value")]/preceding-sibling::span[contains(.,"¬£")]',
    totalTransferValue: '//p[contains(text(), "Total transfer value")]/preceding-sibling::span[contains(.,"¬£")]',
    growthValue: '//p[contains(text(), "Investment growth")]/preceding-sibling::span[contains(.,"¬£")]',
    savingsValue: '//div[contains(text(), "Savings")]',
    insuranceValue: '//div[contains(text(), "Life insurance")]',
    taxFreeCashRemaining: '//p[contains(text(), "Tax-free cash remaining")]/preceding-sibling::span[contains(.,"¬£")]',
    totalWithdrawValue: '//p[contains(text(), "Total net withdrawals")]/preceding-sibling::span[contains(.,"¬£")]',
};


---

5Ô∏è‚É£ Ember Dashboard Selectors (emberDashboardSelectors.ts)

export default {
    totalValue: '//span[contains(text(), "Total value")]/following-sibling::div/span[contains(.,"¬£")]',
    totalTransferValue: '//span[contains(text(), "Total transfer value")]/following-sibling::div/span[contains(.,"¬£")]',
    totalPayment: '//span[contains(text(), "Total payments")]/following-sibling::div/span[contains(.,"¬£")]',
    latestPayment: '//span[contains(text(), "Latest payment")]/following-sibling::div/span[contains(.,"¬£")]',
    investmentGrowth: '//span[contains(text(), "Investment growth")]/following-sibling::div/span[contains(.,"¬£")]',
};


---

6Ô∏è‚É£ Test Config (testConfig.ts)

export const testUsers = [
    { username: 'user1', password: 'password1' },
    { username: 'user2', password: 'password2' }
];

export const urls = {
    login: 'https://solsys1.standardlife.com/secure/customer-authentication-client/customer/login',
    emberDashboard: 'https://main.welcome.standardlife.co.uk/'
};


---

7Ô∏è‚É£ Main Test Spec File (testScenario.e2e.ts)

import { testUsers, urls } from '../testConfig';
import LoginPage from '../pages/loginPage';
import DgDashboardPage from '../pages/dgDashboardPage';
import EmberDashboardPage from '../pages/emberDashboardPage';

describe('End-to-End Ember Dashboard Verification', () => {
    testUsers.forEach((testUser) => {
        it(`should log in to Open AM for user ${testUser.username}`, async () => {
            await LoginPage.openLoginPage(urls.login);
            await LoginPage.login(testUser.username, testUser.password);
            await DgDashboardPage.waitForDashboard();
            
            const dgDashboardValues = await DgDashboardPage.extractValues();
            console.log('Values from DG Dashboard:', dgDashboardValues);

            await EmberDashboardPage.openDashboard(urls.emberDashboard);
            await EmberDashboardPage.waitForDashboard();
            
            const emberDashboardValues = await EmberDashboardPage.extractValues();
            console.log('Values from Ember Dashboard:', emberDashboardValues);

            expect(dgDashboardValues.totalValue).toEqual(emberDashboardValues.totalValue);
            expect(dgDashboardValues.totalTransferValue).toEqual(emberDashboardValues.totalTransferValue);
        });
    });
});


---

‚úÖ Key Improvements

Separated Login, DG Dashboard, and Ember Dashboard for better modularity.

Reusable Selectors to avoid duplicate XPath usage.

Helper functions like waitForDashboard() to ensure page readiness.

Test Users and URLs centralized in testConfig.ts.



---

üöÄ Next Steps

Run the refactored test using:

npx wdio wdio.conf.ts --spec tests/e2e/specs/testScenario.e2e.ts

Let me know if you want additional refinements or enhancements! üöÄ



You're absolutely right! We should first check if the elements are displayed before trying to extract their text values. Otherwise, the test might fail when an expected element is missing.

I'll modify both DgDashboardPage.ts and EmberDashboardPage.ts to safely extract values only if elements exist.


---

1Ô∏è‚É£ Updated DG Dashboard Page (dgDashboardPage.ts)

import { expect } from '@wdio/globals';
import DgDashboardSelectors from '../selectors/dgDashboardSelectors';

class DgDashboardPage {
    async waitForDashboard() {
        await expect($(DgDashboardSelectors.totalValue)).toBeDisplayed();
    }

    async extractValues() {
        const values: Record<string, string> = {};

        if (await $(DgDashboardSelectors.totalValue).isDisplayed()) {
            values.totalValue = await $(DgDashboardSelectors.totalValue).getText();
        }

        if (await $(DgDashboardSelectors.totalTransferValue).isDisplayed()) {
            values.totalTransferValue = await $(DgDashboardSelectors.totalTransferValue).getText();
        }

        if (await $(DgDashboardSelectors.growthValue).isDisplayed()) {
            values.growthValue = await $(DgDashboardSelectors.growthValue).getText();
        }

        if (await $(DgDashboardSelectors.savingsValue).isDisplayed()) {
            values.savingsValue = await $(DgDashboardSelectors.savingsValue).getText();
        }

        if (await $(DgDashboardSelectors.insuranceValue).isDisplayed()) {
            values.insuranceValue = await $(DgDashboardSelectors.insuranceValue).getText();
        }

        if (await $(DgDashboardSelectors.taxFreeCashRemaining).isDisplayed()) {
            values.taxFreeCashRemaining = await $(DgDashboardSelectors.taxFreeCashRemaining).getText();
        }

        if (await $(DgDashboardSelectors.totalWithdrawValue).isDisplayed()) {
            values.totalWithdrawValue = await $(DgDashboardSelectors.totalWithdrawValue).getText();
        }

        return values;
    }
}

export default new DgDashboardPage();


---

2Ô∏è‚É£ Updated Ember Dashboard Page (emberDashboardPage.ts)

import { expect } from '@wdio/globals';
import EmberDashboardSelectors from '../selectors/emberDashboardSelectors';

class EmberDashboardPage {
    async openDashboard(url: string) {
        await browser.newWindow(url, { type: 'tab' });
    }

    async waitForDashboard() {
        await expect($(EmberDashboardSelectors.totalValue)).toBeDisplayed();
    }

    async extractValues() {
        const values: Record<string, string> = {};

        if (await $(EmberDashboardSelectors.totalValue).isDisplayed()) {
            values.totalValue = await $(EmberDashboardSelectors.totalValue).getText();
        }

        if (await $(EmberDashboardSelectors.totalTransferValue).isDisplayed()) {
            values.totalTransferValue = await $(EmberDashboardSelectors.totalTransferValue).getText();
        }

        if (await $(EmberDashboardSelectors.totalPayment).isDisplayed()) {
            values.totalPayment = await $(EmberDashboardSelectors.totalPayment).getText();
        }

        if (await $(EmberDashboardSelectors.latestPayment).isDisplayed()) {
            values.latestPayment = await $(EmberDashboardSelectors.latestPayment).getText();
        }

        if (await $(EmberDashboardSelectors.investmentGrowth).isDisplayed()) {
            values.investmentGrowth = await $(EmberDashboardSelectors.investmentGrowth).getText();
        }

        return values;
    }
}

export default new EmberDashboardPage();


---

3Ô∏è‚É£ Updated Main Test (testScenario.e2e.ts)

import { testUsers, urls } from '../testConfig';
import LoginPage from '../pages/loginPage';
import DgDashboardPage from '../pages/dgDashboardPage';
import EmberDashboardPage from '../pages/emberDashboardPage';

describe('End-to-End Ember Dashboard Verification', () => {
    testUsers.forEach((testUser) => {
        it(`should log in to Open AM for user ${testUser.username}`, async () => {
            await LoginPage.openLoginPage(urls.login);
            await LoginPage.login(testUser.username, testUser.password);
            await DgDashboardPage.waitForDashboard();
            
            const dgDashboardValues = await DgDashboardPage.extractValues();
            console.log('Values from DG Dashboard:', dgDashboardValues);

            await EmberDashboardPage.openDashboard(urls.emberDashboard);
            await EmberDashboardPage.waitForDashboard();
            
            const emberDashboardValues = await EmberDashboardPage.extractValues();
            console.log('Values from Ember Dashboard:', emberDashboardValues);

            // Compare only values that exist in both dashboards
            for (const key in dgDashboardValues) {
                if (emberDashboardValues[key]) {
                    expect(dgDashboardValues[key]).toEqual(emberDashboardValues[key]);
                }
            }
        });
    });
});


---

‚úÖ What's Improved?

1. Prevents errors when elements are missing

Each selector now checks isDisplayed() before extracting text.



2. Avoids storing undefined values

If a selector is missing, it won't be added to the object.



3. Selective Comparison

The final test only compares values that exist in both dashboards.





---

üöÄ Next Steps

Run the updated test using:

npx wdio wdio.conf.ts --spec tests/e2e/specs/testScenario.e2e.ts

If there's an issue with missing elements, try debugging by printing:

console.log('DG Values:', dgDashboardValues);
console.log('Ember Values:', emberDashboardValues);


This should now be a fully modular & robust POM setup! Let me know if you need further tweaks üöÄ


import { ChainablePromiseElement } from 'webdriverio';
import loginSelectors from '../selectors/loginSelectors';

class LoginPage {
    async login(username: string, password: string): Promise<void> {
        await $(loginSelectors.usernameInput).setValue(username);
        await $(loginSelectors.passwordInput).setValue(password);
        await $(loginSelectors.submitButton).click();
    }

    async enterOtpIfPrompted(): Promise<void> {
        const otpPageHeading = $(loginSelectors.otpPageHeading);
        if (await otpPageHeading.isDisplayed()) {
            await $(loginSelectors.otpInput).setValue('000000');
            await $(loginSelectors.otpSubmitButton).click();
        }
    }
}

export default new LoginPage();


export default {
    usernameInput: '#userid',
    passwordInput: '#password',
    submitButton: '#submit',
    otpPageHeading: "//h3[contains(., 'Enter verification code')]",
    otpInput: '#OTPcode',
    otpSubmitButton: '#VerifyCode'
};




