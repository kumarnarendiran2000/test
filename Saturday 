name: e2e-test
needs: deps-check
runs-on: ubuntu-latest

steps:
  - uses: actions/checkout@v4

  - name: Setup pnpm
    uses: ./.github/actions/setup-pnpm

  - name: Setup Node.js
    uses: actions/setup-node@v4
    with:
      node-version: 20

  - name: Install dependencies
    run: pnpm install

  # Add a step here to create .env.development.local
  - name: Create .env.development.local
    run: |
      echo "EXPO_PUBLIC_LOCAL_RUN_API_BASE=http://localhost:3000" >> apps/dashboard/.env.development.local
      # If you have sensitive info, pull it from GitHub Secrets, e.g.:
      # echo "SECRET_TOKEN=${{ secrets.SECRET_TOKEN }}" >> apps/dashboard/.env.development.local

  - name: Run Backend and Mock-SLAL API servers
    run: |
      pnpm --filter back-end serve:mock &
      pnpm --filter mock-legacy-slal-api serve:local &

  - name: Run Frontend (Expo Web) # via Turbo
    run: |
      pnpm turbo run web --filter @ember/dashboard &
  
  - name: Wait for server
    run: sleep 250

  - name: Run Frontend (Expo Web) # or start again if needed
    run: |
      pnpm --filter @ember/dashboard web &
  
  - name: Wait for server
    run: sleep 250

  - name: Run E2E Test
    run: pnpm --filter e2e test:e2e:mock


If you want to modify the scripts in package.json to have two different test execution modes (headless and normal UI mode), hereâ€™s how you can do it.


---

1. Modify package.json Scripts

In package.json, add these two scripts:

"scripts": {
  "test:headless": "USE_HEADLESS=true npx wdio run wdio.conf.ts",
  "test:ui": "USE_HEADLESS=false npx wdio run wdio.conf.ts"
}

test:headless: Runs the test in headless mode (for CI).

test:ui: Runs the test in normal mode with UI (for local debugging).



---

2. Modify wdio.conf.ts

Now, update wdio.conf.ts to use the USE_HEADLESS flag:

export const config: WebdriverIO.Config = {
    maxInstances: 10,
    
    capabilities: process.env.USE_HEADLESS === 'true' ? [
        {
            browserName: 'MicrosoftEdge',
            'ms:edgeOptions': {
                args: ['--headless'],
            }
        },
        {
            browserName: 'chrome',
            'goog:chromeOptions': {
                args: ['--headless'],
            }
        },
        {
            browserName: 'firefox',
            'moz:firefoxOptions': {
                args: ['--headless'],
            }
        }
    ] : [
        {
            browserName: 'MicrosoftEdge'
        }
    ],

    // Other configurations...
};


---

3. Running the Tests

Now, you can execute tests in two different modes:

âœ… Run in Headless Mode (CI/CD):

npm run test:headless

âœ… Run in UI Mode (Local Debugging):

npm run test:ui


---

Alternative: Running Directly with Flags

If you donâ€™t want to modify package.json, you can directly pass the flag in the terminal:

USE_HEADLESS=true npx wdio run wdio.conf.ts  # Runs in headless mode
USE_HEADLESS=false npx wdio run wdio.conf.ts # Runs in normal UI mode


---

What Changes Were Made?

Added USE_HEADLESS as a flag to determine which capabilities to use.

Updated wdio.conf.ts to switch between headless and normal mode dynamically.

Created two npm scripts so you donâ€™t have to manually set the flag every time.



---

This setup ensures you can easily switch between CI/CD mode (headless) and local debugging mode (UI).

Would this approach work for your case? ðŸš€

