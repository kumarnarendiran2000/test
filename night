export async function waitForPageLoadWithRefresh(timeout = 50000, refreshTimeout = 10000) {
    try {
        // Wait for the page to fully load within the given timeout
        await browser.waitUntil(
            async () => (await browser.execute(() => document.readyState)) === 'complete',
            { timeout, interval: 500 }
        );
    } catch (error) {
        console.warn(`⚠️ Page did not load in ${timeout / 1000} seconds. Refreshing...`);
        
        // Refresh the page
        await browser.refresh();

        // Wait again after refresh
        await browser.waitUntil(
            async () => (await browser.execute(() => document.readyState)) === 'complete',
            { timeout: refreshTimeout, interval: 500 }
        );
    }
}

async openDashboard(url: string) {
    const handles = await browser.getWindowHandles();

    if (handles.length === 1) {
        // If only one tab exists, navigate to the URL instead of opening a new one
        console.warn("Only one tab exists, navigating instead of opening a new tab...");
        await browser.url(url);
    } else {
        // If multiple tabs exist, check if the URL is already open
        const currentUrl = await browser.getUrl();
        if (currentUrl !== url) {
            console.warn("Opening a new tab since the URL is different...");
            await browser.newWindow(url, { type: 'tab' });
        } else {
            console.warn("The correct URL is already open, no new tab needed.");
        }
    }

    // Ensure the page is fully loaded
    await waitForPageLoadWithRefresh();
}

class EmberDashboardPage {
    hasOpenedNewTab = false; // Track whether a new tab was opened

    async openDashboard(url: string) {
        const handles = await browser.getWindowHandles();

        if (!this.hasOpenedNewTab) {
            // First time: Load in the same tab
            console.warn("First loop: Navigating in the same tab...");
            await browser.url(url);
            this.hasOpenedNewTab = true; // Mark that the first round is done
        } else {
            // Second time and beyond: Open in a new tab only once
            console.warn("Second loop onward: Opening a new tab...");
            await browser.newWindow(url, { type: 'tab' });
        }

        // Ensure the page is fully loaded
        await waitForPageLoadWithRefresh();
    }
}

class EmberDashboardPage {
    async openDashboard(url: string): Promise<void> {
        const handles = await browser.getWindowHandles();

        if (handles.length === 1) {
            console.warn("Only one tab exists (probably WDIO blank page). Closing it...");
            await browser.closeWindow(); // Close the default blank tab
            const newHandles = await browser.getWindowHandles();
            await browser.switchToWindow(newHandles[0]); // Ensure we're on an active tab
        }

        console.warn("Opening a new tab...");
        await browser.newWindow(url, { type: 'tab' });

        // Ensure the page is fully loaded
        await waitForPageLoadWithRefresh();
    }
}

class EmberDashboardPage {
    private hasClosedBlankTab: boolean = false; // Track if we already closed the blank tab

    async openDashboard(url: string): Promise<void> {
        const handles = await browser.getWindowHandles();

        if (handles.length === 1 && !this.hasClosedBlankTab) {
            console.warn("First iteration: Closing WDIO's default blank tab...");
            await browser.closeWindow();
            const newHandles = await browser.getWindowHandles();
            await browser.switchToWindow(newHandles[0]); // Ensure we're on an active tab
            this.hasClosedBlankTab = true; // Prevent closing the real tab later
        }

        console.warn("Opening a new tab...");
        await browser.newWindow(url, { type: 'tab' });

        // Ensure the page is fully loaded
        await waitForPageLoadWithRefresh();
    }
}

async openDashboard(url: string): Promise<void> {
    const hasOpenedNewTab = await browser.execute(() => sessionStorage.getItem('hasOpenedNewTab'));

    if (!hasOpenedNewTab) {
        console.warn("First loop: Navigating in the same tab...");
        await browser.url(url);
        await browser.execute(() => sessionStorage.setItem('hasOpenedNewTab', 'true'));
    } else {
        console.warn("Second loop onward: Opening a new tab...");
        await browser.newWindow(url, { type: 'tab' });
    }

    await waitForPageLoadWithRefresh();
}

class EmberDashboardPage {
    private static hasOpenedNewTab: boolean = false; // Static so it persists across function calls

    async openDashboard(url: string): Promise<void> {
        if (!EmberDashboardPage.hasOpenedNewTab) {
            console.warn("First loop: Navigating in the same tab...");
            await browser.url(url);
            EmberDashboardPage.hasOpenedNewTab = true; // Set true so next call opens a new tab
        } else {
            console.warn("Second loop onward: Opening a new tab...");
            await browser.newWindow(url, { type: 'tab' });
        }

        // Ensure the page is fully loaded
        await waitForPageLoadWithRefresh();
    }
}

async openDashboard(url: string): Promise<void> {
    const hasOpenedNewTab = await browser.execute(() => sessionStorage.getItem('hasOpenedNewTab'));

    if (!hasOpenedNewTab) {
        console.warn("First loop: Navigating in the same tab...");
        await browser.url(url);
        await browser.execute(() => sessionStorage.setItem('hasOpenedNewTab', 'true'));
    } else {
        console.warn("Second loop onward: Opening a new tab...");
        await browser.newWindow(url, { type: 'tab' });
    }

    await waitForPageLoadWithRefresh();
}

class EmberDashboardPage {
    // No need for a static class variable, we rely on sessionStorage

    async openDashboard(url: string): Promise<void> {
        // Retrieve the value from sessionStorage
        const hasOpenedNewTab = await browser.execute(() => sessionStorage.getItem('hasOpenedNewTab'));

        if (!hasOpenedNewTab) {
            console.warn("First loop: Navigating in the same tab...");
            await browser.url(url);

            // Store flag in sessionStorage
            await browser.execute(() => sessionStorage.setItem('hasOpenedNewTab', 'true'));
        } else {
            console.warn("Second loop onward: Opening a new tab...");
            await browser.newWindow(url, { type: 'tab' });
        }

        await waitForPageLoadWithRefresh();
    }
}


To create selectors for this logout confirmation message in your Page Object Model (POM), you can define them in your selectors file and then access them in your page class.

Selectors (e.g., logoutSelectors.ts)

export const logoutSelectors = {
  logoutMessage: '//pre[contains(text(), "Logout successful")]', // XPath for the logout confirmation message
  csrfToken: '//pre[contains(text(), "csrfToken")]', // XPath to verify CSRF token presence
};

Page Object (e.g., LogoutPage.ts)

import { logoutSelectors } from '../selectors/logoutSelectors';

class LogoutPage {
  async verifyLogoutMessage(): Promise<void> {
    const message = await $(logoutSelectors.logoutMessage);
    await message.waitForDisplayed({ timeout: 5000 });
    expect(await message.getText()).toContain('Logout successful');
  }

  async verifyCSRFToken(): Promise<void> {
    const csrfToken = await $(logoutSelectors.csrfToken);
    await csrfToken.waitForDisplayed({ timeout: 5000 });
    expect(await csrfToken.getText()).not.toBeNull();
  }
}

export default new LogoutPage();

Usage in Spec File (e.g., logout.e2e.ts)

import LogoutPage from '../pages/LogoutPage';

describe('Logout Test', () => {
  it('should display logout confirmation message', async () => {
    await LogoutPage.verifyLogoutMessage();
    await LogoutPage.verifyCSRFToken();
  });
});

This ensures that after logout, your test checks for:

1. The logout success message (Logout successful).


2. The presence of the CSRF token (to validate API response integrity).



Let me know if you need refinements!


Yes, that approach is solid and aligns well with your Page Object Model (POM) structure. Here’s how you can structure it in your selectors, page, and spec file to keep it modular and maintainable.


---

1. Update Selectors File (EmberDashboardSelectors.ts)

Define selectors for logout verification.

const EmberDashboardSelectors = {
    logoutButton: '//button[div[contains(text(),"Logout")]]', // Your refined XPath
    logoutMessage: 'pre', // Assuming JSON response appears in <pre> tag
};

export default EmberDashboardSelectors;


---

2. Update Page Object File (EmberDashboardPage.ts)

Modify the logoutDashboard method to:

Click the logout button.

Wait for the logout success message.

Validate the URL contains /logout.

Verify both the message and CSRF token.


import EmberDashboardSelectors from '../selectors/EmberDashboardSelectors';

class EmberDashboardPage {
    async logoutDashboard(): Promise<void> {
        const logoutButton = $(EmberDashboardSelectors.logoutButton);
        await logoutButton.waitForDisplayed({ timeout: 5000 });
        await logoutButton.click();

        // Wait until logout message appears
        const logoutMessage = $(EmberDashboardSelectors.logoutMessage);
        await logoutMessage.waitForDisplayed({ timeout: 5000 });

        // Verify URL contains '/logout'
        await browser.waitUntil(
            async () => (await browser.getUrl()).includes('/secure/customer-platform/logout'),
            { timeout: 10000, timeoutMsg: 'Did not navigate to logout page' }
        );

        // Extract and validate logout JSON response
        const messageText = await logoutMessage.getText();
        const jsonResponse = JSON.parse(messageText);

        expect(jsonResponse.message).toBe('Logout successful');
        expect(jsonResponse).toHaveProperty('csrfToken'); // Ensure CSRF token exists
    }
}

export default new EmberDashboardPage();


---

3. Update Your Spec File (emberDashboardWithMockData.e2e.ts)

Call the logoutDashboard() method inside your test case.

it('should logout the dashboard successfully', async () => {
    await EmberDashboardPage.logoutDashboard();
});


---

Final Flow

✔ Click Logout Button
✔ Wait for Logout Success Message
✔ Verify URL contains /logout
✔ Validate JSON message and CSRF token

This approach keeps everything modular and aligned with your POM structure.

Would you like any additional refinements?


class EmberDashboardPage {
    async navigateAndVerifyButtons(useMockData = false): Promise<void> {
        const originalWindow = await browser.getWindowHandle();

        for (const button of buttonSelectors) {
            const buttonElement = $(`[aria-label='${button.ariaLabel}']`);
            await expect(buttonElement).toBeDisplayed();

            // If useMockData is true, only click the specific buttons
            if (useMockData) {
                if (button.ariaLabel !== 'Find my pensions button' && button.ariaLabel !== 'View Money Mindset Rewards button') {
                    continue; // Skip clicking other buttons in mock mode
                }
            }

            await buttonElement.click();

            if (button.shouldOpenNewTab) {
                await browser.waitUntil(
                    async () => (await browser.getWindowHandles()).length > 1,
                    { timeout: 10000 }
                );

                const handles = await browser.getWindowHandles();
                await browser.switchWindow(handles[handles.length - 1]);

                await waitForPageLoadWithRefresh();
                expect(await browser.getUrl()).toContain(button.expectedUrlContains);

                await browser.closeWindow();
                await browser.switchWindow(originalWindow);
            } else {
                if (button.waitForSelector) {
                    await waitForElementToBeDisplayed($(button.waitForSelector));
                }
                expect(await browser.getUrl()).toContain(button.expectedUrlContains);
            }
        }
    }
}

export default new EmberDashboardPage();


Got it! Here's the refined PR description with that clarification:


---

Description

Implemented WDIO e2e test suite for the web dashboard.

Setup WDIO via pnpm.

Component validations: Covered amount values, buttons, and their clicks, focusing on major interactions as an initial start.

Pulled test data from Mock SLAL server for verification.

Followed Page Object Model (POM) structure:

The spec file calls the page object.

The page object interacts with components using selectors for validation.



Feature/Issue Validation Testing

Tests performed:

[ ] Logs before change

[ ] Logs after change


Checklist

[ ] Added tests to verify the fix/effectiveness

[ ] Code is commented for readability

[ ] Updated relevant documentation



---

Why This Works Better?

Clarifies that validations were focused on major interactions as an initial start.

Concise yet clear explanation of what was covered.

Maintains a professional and structured format.


Let me know if you need any more refinements!



Here's the updated PR description with your additional point about Edge browser automation:


---

Description

Implemented WDIO e2e test suite for the web dashboard.

Setup WDIO via pnpm.

Component validations: Covered amount values, buttons, and their clicks, focusing on major interactions as an initial start.

Pulled test data from Mock SLAL server for verification.

Automating via Microsoft Edge for local execution, as only Edge is added in capabilities for now.

Followed Page Object Model (POM) structure:

The spec file calls the page object.

The page object interacts with components using selectors for validation.



Feature/Issue Validation Testing

Tests performed:

[ ] Logs before change

[ ] Logs after change


Checklist

[ ] Added tests to verify the fix/effectiveness

[ ] Code is commented for readability

[ ] Updated relevant documentation



---

Why This Works Better?

Includes the Edge browser automation detail explicitly.

Clearly states what was validated and how it was structured.

Keeps it professional, structured, and concise.


Let me know if this works or if you need more refinements!

//div[contains(@role, 'alert')]//*[name()='svg'] 
   | //div[contains(@role, 'alert')]//div[contains(text(), "Don't worry if your amount of cover seems odd - It takes time to process payments and withdrawals. Check back after 2 working days.")]



