//h2[contains(text(), 'Your pension')]/following-sibling::div//p[contains(text(), 'Total value')]/following-sibling::span[contains(text(), 'Â£')]

//h2[contains(text(), 'Your pension')]/following-sibling::div//p[contains(text(), 'Investment growth')]/following-sibling::span[contains(text(), 'Â£')]


To convert your test into a Page Object Model (POM) structure, we need to separate concerns into individual page classes and selectors while keeping the test logic in the spec file. Here's how you can structure it:


---

Steps to Convert:

1. Create a TestHarnessPage.ts (Handles CK Number input and selection)


2. Update EmberDashboardPage.ts (Already exists, reuse for extracting Ember Dashboard values)


3. Create DgDashboardPage.ts (Handles extracting DG Dashboard values)


4. Modify the Spec file to call these page methods in a loop for multiple CK numbers




---

1. Create TestHarnessPage.ts

import { waitForElementToBeDisplayed } from '../utils/helpers';
import testHarnessSelectors from '../selectors/testHarnessSelectors';

class TestHarnessPage {
    async openTestHarness(url: string): Promise<void> {
        await browser.url(url);
    }

    async enterCkNumber(ckNumber: string): Promise<void> {
        const ckNumberInput = $(testHarnessSelectors.ckNumberInput);
        await ckNumberInput.setValue(ckNumber);
    }

    async selectEmberMain(): Promise<void> {
        const dropdown = $(testHarnessSelectors.dropdown);
        await waitForElementToBeDisplayed(dropdown);
        await dropdown.selectByVisibleText('Ember main');
    }

    async openInNewWindow(): Promise<void> {
        const newWindowButton = $(testHarnessSelectors.newWindowButton);
        await newWindowButton.click();
        const handles = await browser.getWindowHandles();
        await browser.switchWindow(handles[1]); // Switch to newly opened tab
    }
}

export default new TestHarnessPage();


---

2. Update EmberDashboardPage.ts

(Already exists, reuse for extracting values)


---

3. Create DgDashboardPage.ts

import { waitForElementToBeDisplayed } from '../utils/helpers';
import dgDashboardSelectors from '../selectors/dgDashboardSelectors';

class DgDashboardPage {
    async extractValues(): Promise<Record<string, string>> {
        const values: Record<string, string> = {};

        if (await $(dgDashboardSelectors.totalValue).isDisplayed()) {
            values.totalValue = await $(dgDashboardSelectors.totalValue).getText();
        }
        if (await $(dgDashboardSelectors.investmentGrowth).isDisplayed()) {
            values.investmentGrowth = await $(dgDashboardSelectors.investmentGrowth).getText();
        }

        return values;
    }
}

export default new DgDashboardPage();


---

4. Create testHarnessSelectors.ts

export default {
    ckNumberInput: "input[name='CKNumber']",
    dropdown: "select[name='DestEntry']",
    newWindowButton: "input[value='... in New window']"
};


---

5. Update Spec File testScenario.e2e.ts

import { browser, expect } from '@wdio/globals';
import testHarnessPage from '../pages/testHarnessPage';
import emberDashboardPage from '../pages/emberDashboardPage';
import dgDashboardPage from '../pages/dgDashboardPage';
import { ckNumbers, urls } from '../utils/testConfig';

describe('End-to-End Ember Dashboard Verification', () => {
    before(async () => {
        await browser.setWindowRect(1920, 1080);
        await browser.maximizeWindow();
    });

    ckNumbers.forEach((ckNumber) => {
        it(`should validate Ember and DG Dashboard for CK: ${ckNumber}`, async () => {
            // Open Test Harness
            await testHarnessPage.openTestHarness(urls.testHarness);
            await testHarnessPage.enterCkNumber(ckNumber);
            await testHarnessPage.selectEmberMain();
            await testHarnessPage.openInNewWindow();

            // Extract values from Ember Dashboard
            await emberDashboardPage.waitForDashboard();
            const emberValues = await emberDashboardPage.extractValues();

            // Open DG Dashboard in new tab
            await browser.newWindow(urls.dgDashboard);
            await browser.pause(5000);
            const dgValues = await dgDashboardPage.extractValues();

            // Compare Values
            Object.keys(dgValues).forEach((key) => {
                if (emberValues.hasOwnProperty(key)) {
                    expect(dgValues[key]).toEqual(emberValues[key]);
                }
            });

            console.log('Total values match successfully');
        });
    });
});


---

Summary of Changes:

Created TestHarnessPage.ts to handle CK input and window switching.

Updated EmberDashboardPage.ts to be reusable.

Created DgDashboardPage.ts to extract DG Dashboard values.

Refactored the test spec to loop through multiple CK numbers.

Selectors moved to separate files for maintainability.



---

Outcome:

Your test now follows Page Object Model (POM) best practices.

Each page has its own responsibility.

The test spec only calls the necessary methods, making it cleaner and more readable.


Would you like to add any enhancements or adjustments?


Here's the refactored CI pipeline configuration with the correct flow for setting up your frontend, backend mock server, and e2e tests:

Updated CI Pipeline (ci-pipeline.yml)

jobs:
  integration-test:
    needs: deps-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: ./.github/actions/setup-pnpm

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: pnpm install

      - name: Start Backend Mock Servers
        run: |
          pnpm --filter back-end serve:mock &
          pnpm --filter mock-legacy-slal-api serve:local &

      - name: Configure Frontend Environment
        run: |
          echo "API_BASE_URL=http://localhost:5000" > .env.local
          echo "ANOTHER_ENV_VAR=value" >> .env.local

      - name: Start Frontend Server
        run: pnpm --filter @ember/dashboard web &
      
      - name: Wait for Frontend to be Ready
        run: |
          for i in {1..30}; do
            if curl --output /dev/null --silent --head --fail http://localhost:8081; then
              echo "Frontend is up!"
              exit 0
            fi
            echo "Waiting for frontend to start..."
            sleep 5
          done
          echo "Frontend did not start in time" && exit 1

      - name: Run E2E Tests
        run: pnpm test:e2e --filter @ember/tests -- spec/e2e/test/pomTestMockData.e2e.ts


---

Explanation of Refactored Flow

1. Checkout Repository â†’ Clones the latest code.


2. Setup PNPM & Node.js â†’ Ensures the right package manager and runtime.


3. Install Dependencies â†’ Installs required project dependencies.


4. Start Backend Mock Servers â†’ Runs both backend mock servers in the background (& keeps them running).


5. Configure Frontend Environment â†’ Creates a .env.local file with necessary API overrides.


6. Start Frontend Server â†’ Runs the frontend (pnpm --filter @ember/dashboard web &).


7. Wait for Frontend to be Ready â†’ Checks every 5 seconds (max 2.5 minutes) if the frontend is up before proceeding.


8. Run E2E Tests â†’ Executes only the mock data test spec (pomTestMockData.e2e.ts).




---

Why This Works?

Ensures all servers are running before the tests start.

Waits for the frontend instead of using wait-on (since your app requires cookies to be set).

Runs tests in an isolated environment with only one spec file for efficiency.


This should now work in your CI pipeline as expected. ðŸš€


- name: Start Backend Mock Server
  run: pnpm --filter back-end serve:mock &

- name: Start Mock SLAL Server
  run: pnpm --filter mock-legacy-slal-api serve:local &

- name: Start Frontend Server
  run: pnpm --filter @ember/dashboard web &

- name: Wait for Frontend to Start
  run: sleep 30 # Adjust time based on your server startup time

- name: Run WebDriverIO E2E Test
  run: pnpm test:e2e --spec=tests/e2e/specs/mockdatatest.e2e.ts


capabilities: [
  {
    browserName: 'MicrosoftEdge',
    'ms:edgeOptions': {
      binary: '/usr/bin/microsoft-edge',
      args: ['--user-data-dir=/tmp/edge-profile', '--no-sandbox', '--disable-dev-shm-usage'],
    },
  },
],


- name: Cleanup Edge Profile
  run: rm -rf /tmp/edge-profile

'ms:edgeOptions': {
  args: ['--headless', '--disable-gpu', '--user-data-dir=/tmp/edge-profile'],
},

const isCI = process.env.CI === 'true';

capabilities: [
  {
    browserName: 'MicrosoftEdge',
    'ms:edgeOptions': {
      binary: '/usr/bin/microsoft-edge',
      args: [
        isCI ? '--headless' : '',
        '--disable-gpu',
        '--no-sandbox',
        '--disable-dev-shm-usage',
        isCI ? '--user-data-dir=/tmp/edge-profile' : '',
      ].filter(Boolean), // Removes empty values
    },
  },
],