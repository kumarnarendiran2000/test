Based on our discussion, hereâ€™s a summary of the issue and some potential solutions:

The Issue:
When running the same URL in a loop with different data, the tests sometimes experience collisionsâ€”the button clicks, and the new tab that should open gets stuck loading. Using browser.reloadSession() has helped reset state, but it's causing slowness and multiple listener warnings.

Whatâ€™s Happening:

Data Collisions & Caching: The same URL is being loaded repeatedly with different data, and the browser/session might be caching or reusing old data.

New Tab Issues: Opening new tabs in a loop can sometimes lead to the new window not fully initializing, which causes the page to hang.

Reloading Session: While it resets everything, itâ€™s a heavy operation that also adds extra event listeners each time a session is reloaded, leading to warnings and overall slower execution.


Potential Alternatives:

1. Clear Cookies & Storage Instead of Reloading Session:
Instead of reloading the whole session, you can clear cookies, local storage, and session storage before each iteration. For example:

await browser.deleteAllCookies();
await browser.execute(() => {
  window.localStorage.clear();
  window.sessionStorage.clear();
});
await browser.refresh();

This can reset the state without the overhead of a full session reload.


2. Force New Tab Handling with Waits:
Ensure that every time a new tab is opened, you wait explicitly for it to load:

await browser.newWindow(url);
await browser.waitUntil(
  async () => (await browser.getWindowHandles()).length > 1,
  { timeout: 10000, timeoutMsg: 'New tab did not open in time' }
);
// Switch and wait for expected URL or element
const handles = await browser.getWindowHandles();
await browser.switchWindow(handles[handles.length - 1]);
await browser.waitUntil(
  async () => (await browser.getUrl()).includes(expectedUrlPart),
  { timeout: 10000, timeoutMsg: 'Page did not load as expected' }
);

This can help avoid hanging when the new tab is stuck loading.


3. Reduce Parallelism:
If multiple tests are opening tabs simultaneously, reducing the maxInstances or running tests sequentially can prevent state collisions.



Final Thought:
Using browser.reloadSession() is a brute-force approach that resets everything but comes at a cost. Clearing cookies and storage combined with proper waiting and tab management might be a gentler solution that avoids the multiple listeners warning and speeds up your tests.

Let me know if youâ€™d like to explore these alternatives further or need any more adjustments!


{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "moduleResolution": "node",
    "module": "commonjs",
    "types": [
      "node",
      "@wdio/globals/types",
      "expect-webdriverio",
      "@wdio/mocha-framework"
    ],
    "baseUrl": ".", 
    "paths": {
      "~/*": ["./*"] 
    }
  },
  "include": ["test", "wdio.conf.ts"]
}

static async navigateAndVerifyButtons(mockData = false): Promise<void> {
    const originalWindow = await browser.getWindowHandle();

    for (const button of dashboardButtonSelectors) {
        const buttonElement = await $(`[aria-label='${button.ariaLabel}']`);
        await waitForElementToBeDisplayed(buttonElement);

        if (mockData) {
            if (button.ariaLabel === 'Find_my_pensions_button' || button.ariaLabel === 'View_Money_Mindset_Rewards_button') {
                continue;
            }
        }

        await buttonElement.click();

        if (button.shouldOpenNewTab) {
            await browser.waitUntil(async () => (await browser.getWindowHandles()).length > 1, { timeout: 10000 });

            const handles = await browser.getWindowHandles();
            await browser.switchWindow(handles[handles.length - 1]);
            await waitForPageLoadWithRefresh();

            if (button.waitForSelector) {
                await waitForElementToBeDisplayed($(button.waitForSelector));
            }

            expect(await browser.getUrl()).toContain(button.expectedUrlContains);
            await browser.closeWindow();
            await browser.switchWindow(originalWindow);
        } else {
            if (button.waitForSelector) {
                await waitForElementToBeDisplayed($(button.waitForSelector));
            }

            expect(await browser.getUrl()).toContain(button.expectedUrlContains);
        }
    }
}

static async navigateAndVerifyButtons(mockData = false): Promise<void> {
    const originalWindow = await browser.getWindowHandle();

    // Filter out items if mockData is true
    const filteredButtons = dashboardButtonSelectors.filter(
        (button) => !(mockData && (button.ariaLabel === 'Find_my_pensions_button' || button.ariaLabel === 'View_Money_Mindset_Rewards_button'))
    );

    await Promise.all(
        filteredButtons.map(async (button) => {
            const buttonElement = await $(`[aria-label='${button.ariaLabel}']`);
            await waitForElementToBeDisplayed(buttonElement);
            await buttonElement.click();

            if (button.shouldOpenNewTab) {
                await browser.waitUntil(async () => (await browser.getWindowHandles()).length > 1, { timeout: 10000 });

                const handles = await browser.getWindowHandles();
                await browser.switchWindow(handles[handles.length - 1]);
                await waitForPageLoadWithRefresh();

                if (button.waitForSelector) {
                    await waitForElementToBeDisplayed($(button.waitForSelector));
                }

                expect(await browser.getUrl()).toContain(button.expectedUrlContains);
                await browser.closeWindow();
                await browser.switchWindow(originalWindow);
            } else {
                if (button.waitForSelector) {
                    await waitForElementToBeDisplayed($(button.waitForSelector));
                }

                expect(await browser.getUrl()).toContain(button.expectedUrlContains);
            }
        })
    );
}

Yes, that's the right approach! Here's how you can refactor it:

Steps to Fix ESLint Complaints

1. Convert for loop to forEach: This avoids ESLint's no-restricted-syntax error.


2. Move the logic inside forEach to a separate function: This fixes the no-await-in-loop ESLint warning.




---

Step 1: Move Button Logic to a Helper Function

Create a helper function inside helpers.ts:

export async function handleButtonClick(button: ButtonType, originalWindow: string) {
    const buttonElement = await $(`[aria-label='${button.ariaLabel}']`);
    await waitForElementToBeDisplayed(buttonElement);
    await buttonElement.click();

    if (button.shouldOpenNewTab) {
        await browser.waitUntil(async () => (await browser.getWindowHandles()).length > 1, {
            timeout: 10000,
        });

        const handles = await browser.getWindowHandles();
        await browser.switchWindow(handles[handles.length - 1]);
        await waitForPageLoadWithRefresh();

        if (button.waitForSelector) {
            await waitForElementToBeDisplayed($(button.waitForSelector));
        }

        expect(await browser.getUrl()).toContain(button.expectedUrlContains);
        await browser.closeWindow();
        await browser.switchWindow(originalWindow);
    } else {
        if (button.waitForSelector) {
            await waitForElementToBeDisplayed($(button.waitForSelector));
        }
        expect(await browser.getUrl()).toContain(button.expectedUrlContains);
    }
}


---

Step 2: Convert for Loop to forEach and Use Helper Function

Modify your function in dashboardScreen.ts:

static async navigateAndVerifyButtons(mockData = false): Promise<void> {
    const originalWindow = await browser.getWindowHandle();

    const filteredButtons = dashboardButtonSelectors.filter(
        (button) =>
            mockData ||
            button.ariaLabel === 'Find my pensions button' ||
            button.ariaLabel === 'View Money Mindset Rewards button'
    );

    await Promise.all(filteredButtons.map(button => handleButtonClick(button, originalWindow)));
}


---

Why This Works?

âœ… Fixes no-await-in-loop: await is now inside a separate function, and .map() runs asynchronously.
âœ… Fixes no-restricted-syntax: No for loop, only .map() which is allowed.
âœ… Keeps Code Clean: The button logic is reusable and modular in helpers.ts.

Let me know if you need more refinements! ðŸš€


Based on the first image (best practices for test descriptions), hereâ€™s how you can refactor your describe and it blocks to be more meaningful and aligned with good testing practices:

Issues to Address:

1. Avoid using "should" â€“ Instead, describe what the test does explicitly.


2. More meaningful descriptions â€“ Avoid generic descriptions like CK: standardLifeId.


3. Break tests into logical sections â€“ Use multiple describe blocks instead of nesting everything under one.




---

Refactored Test Suite Structure

Hereâ€™s how you can restructure your tests to follow best practices:

describe('User Dashboard Tests', () => {
    before(async () => {
        await browser.maximizeWindow();
    });

    describe('Authentication & Initial Load', () => {
        testPacks.forEach((testPack) => {
            it(`logs in and loads the dashboard for ${testPack.welcomeName}`, async () => {
                await DashboardScreen.openDashboard(urls.localDevEmberDashboard);
                await authenticate(testPack.standardLifeId);
                await DashboardScreen.acceptAllCookies();
                await DashboardScreen.waitForDashboard();
            });
        });
    });

    describe('Data Verification', () => {
        testPacks.forEach((testPack) => {
            it(`validates dashboard values for ${testPack.welcomeName}`, async () => {
                const extractedValues = await DashboardScreen.extractValues();
                console.log(`Dashboard Data for ${testPack.welcomeName}:`, extractedValues);

                Object.keys(testPack).forEach((key) => {
                    if (extractedValues.hasOwnProperty(key)) {
                        expect(extractedValues[key]).toEqual(testPack[key].toLocaleString());
                    }
                });
            });

            it(`verifies alert box visibility for ${testPack.welcomeName}`, async () => {
                await DashboardScreen.verifyAlertBox();
            });
        });
    });

    describe('Dashboard Interactions', () => {
        it('submits feedback and verifies message disappears', async () => {
            await DashboardScreen.submitFeedback();
        });

        it('navigates through dashboard buttons', async () => {
            await DashboardScreen.navigateAndVerifyButtons(true);
        });

        it('logs out from the dashboard successfully', async () => {
            await DashboardScreen.logoutDashboard();
        });
    });
});


---

Why This Refactoring is Better?

âœ… More Descriptive Test Names

Instead of vague "should verify values," it now states "validates dashboard values for Test User".


âœ… Organized Test Sections

Authentication & Load: Logs in and loads the dashboard.

Data Verification: Extracts and checks values, validates alerts.

Dashboard Interactions: Button clicks, feedback submission, logout.


âœ… Reduces Redundant Calls

The login & authentication is handled once per user inside a loop.

Buttons are only verified once.


This will increase test clarity, improve debugging, and reduce execution time.

Would you like any further adjustments?


Jira Comment:

The current update includes WDIO with Edge as the automation browser. Three key scenarios have been sorted and successfully trialed locally:

1. Test Harness Comparison â€“ Verifying Ember Dashboard vs. Legacy SLAL Dashboard values.


2. AWS-Hosted Dashboard Comparison â€“ Comparing contribution values in Ember and DG Dashboards.


3. Mock SLAL Server Data â€“ Fetching and validating contribution values against Ember Dashboard.



All scenarios include element interactions alongside contribution value verification. Currently refactoring the suite and integrating Scenario 3 with Mock SLAL data and Ember Dashboard interactions.

PRs are created and under review. Work in progress on screenshot integration, Allure reporting, and CI pipeline setup, nearing completion. Will be feeding PRs one after another post-optimization and final refinements.




