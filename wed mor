const handles = await browser.getWindowHandles();
console.log("Available window handles before switch:", handles);

await browser.switchWindow(handles[handles.length - 1]);

await browser.waitUntil(
    async () => (await browser.getWindowHandle()) === handles[handles.length - 1],
    {
        timeout: 5000,
        timeoutMsg: 'Window switch did not complete',
    }
);

console.log("Switched to handle:", handles[handles.length - 1]);
console.log("Current URL after switching:", await browser.getUrl());

await browser.waitUntil(
    async () => {
        const readyState = await browser.execute(() => document.readyState);
        console.log("Document Ready State:", readyState);
        return readyState === 'complete';
    },
    {
        timeout: 15000,
        timeoutMsg: 'Page did not fully load within the time limit',
    }
);


const spinner = $("//img[contains(@src, 'spinner.svg') and @alt='loading']");

await browser.waitUntil(
  async () => !(await spinner.isDisplayed()),
  { timeout: 15000, timeoutMsg: 'Spinner did not disappear in time' }
);

let previousUrl = '';
await browser.waitUntil(
  async () => {
    const currentUrl = await browser.getUrl();
    
    // Define the expected sub-URL
    const expectedSubUrl = "/expected-path"; // Change this based on your case

    // Check if the URL is stable and ends with the expected path
    if (currentUrl === previousUrl && currentUrl.endsWith(expectedSubUrl)) return true;

    previousUrl = currentUrl;
    return false;
  },
  { timeout: 10000, timeoutMsg: 'URL did not stabilize or did not end with expected path' }
);

const acceptCookiesButton = $(EmberDashboardSelectors.acceptAllCookiesButton);

// Wait for the button to be displayed, but don’t fail if it isn’t
const isButtonVisible = await browser.waitUntil(
  async () => await acceptCookiesButton.isDisplayed(),
  {
    timeout: 5000, // Wait for max 5 seconds
    interval: 500, // Check every 500ms
    timeoutMsg: "Accept Cookies button not displayed in time",
  }
).catch(() => false); // Catch timeout errors and return false

// Click only if the button was found and displayed
if (isButtonVisible) {
  await acceptCookiesButton.click();
  console.log("Clicked Accept Cookies");
} else {
  console.log("Accept Cookies button was not visible, skipping click");
}