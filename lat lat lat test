await browser.waitUntil(
  async () => {
    const cookies = await browser.getCookies();
    return cookies.some(cookie => cookie.name === 'auth_token'); // Update cookie name
  },
  {
    timeout: 10000,
    timeoutMsg: 'Authentication cookies were not set in time',
  }
);


describe('Login and Navigate to Ember POC in New Window', () => {
  before(async () => {
    if (!browser.isMobile) {
      await browser.url('https://cdinteg.internal.standardlife.co.uk/customer-platform-test-harness');
      await browser.maximizeWindow();
      await browser.pause(2000); // Wait for page to load
    }
  });

  it('should enter CK Number, select Ember POC, and open in new window', async () => {
    // Enter CK Number
    const ckNumberInput = $('#CKNumber');  // Using ID from Inspect
    await ckNumberInput.setValue('990006295028');

    // Select Ember POC from Dropdown
    const dropdown = $('#DestTestEnv'); // Dropdown by ID
    await dropdown.selectByVisibleText('Ember POC');

    // Click the "In New Window" button
    const inNewWindowButton = $('input[value="In New Window"]');
    await inNewWindowButton.click();

    // Wait for the new window to open
    await browser.pause(3000);

    // Get Window Handles
    const handles = await browser.getWindowHandles();
    await browser.switchToWindow(handles[1]); // Switch to new window

    // Validate New Window Opened
    console.log('Successfully switched to new window:', await browser.getTitle());

    // Continue Testing in New Window...
    await browser.pause(5000);  // Adjust as needed

    // Take Screenshot
    await browser.saveScreenshot(`./screenshots/success/new-window-${Date.now()}.png`);
  });
});

it('should enter CK Number, select Ember POC, and open in new window', async () => {
  // Enter CK Number using name attribute
  const ckNumberInput = $('input[name="CKNumber"]');
  await ckNumberInput.setValue('990006295028');

  // Select Ember POC from Dropdown using name attribute
  const dropdown = $('select[name="DestTestEnv"]');
  await dropdown.selectByVisibleText('Ember POC');

  // Click the "In New Window" button using input type and value
  const inNewWindowButton = $('input[value="In New Window"]');
  await inNewWindowButton.click();

  // Wait for the new window to open
  await browser.pause(3000);

  // Get Window Handles and Switch
  const handles = await browser.getWindowHandles();
  await browser.switchToWindow(handles[1]); 

  // Validate New Window Opened
  console.log('Successfully switched to new window:', await browser.getTitle());

  // Continue Testing in New Window...
  await browser.pause(5000);

  // Take Screenshot
  await browser.saveScreenshot(`./screenshots/success/new-window-${Date.now()}.png`);
});

describe('Login, Navigate to Ember POC, and Verify Pension Values', () => {
  let initialTotalValue, initialInvestmentGrowth;

  before(async () => {
    if (!browser.isMobile) {
      await browser.url('https://cdinteg.internal.standardlife.co.uk/customer-platform-test-harness');
      await browser.maximizeWindow();
      await browser.pause(2000);
    }
  });

  it('should enter CK Number, select Ember POC, and open in new window', async () => {
    // Enter CK Number
    const ckNumberInput = $('input[name="CKNumber"]');
    await ckNumberInput.setValue('990006295028');

    // Select Ember POC from Dropdown
    const dropdown = $('select[name="DestTestEnv"]');
    await dropdown.selectByVisibleText('Ember POC');

    // Click the "In New Window" button
    const inNewWindowButton = $('input[value="In New Window"]');
    await inNewWindowButton.click();

    // Wait for the new window to open
    await browser.pause(3000);

    // Get Window Handles and Switch to the New Window
    const handles = await browser.getWindowHandles();
    await browser.switchToWindow(handles[1]);

    // Validate New Window Opened
    console.log('Successfully switched to new window:', await browser.getTitle());

    // Capture Initial Total Value and Investment Growth from Ember POC
    const totalValueElement = await $('#pensionValue');
    const investmentGrowthElement = await $('#pensionSecondValue');

    await expect(totalValueElement).toBeDisplayed();
    await expect(investmentGrowthElement).toBeDisplayed();

    initialTotalValue = await totalValueElement.getText();
    initialInvestmentGrowth = await investmentGrowthElement.getText();

    console.log('Initial Total Value:', initialTotalValue);
    console.log('Initial Investment Growth:', initialInvestmentGrowth);

    // Take Screenshot
    await browser.saveScreenshot(`./screenshots/success/new-window-${Date.now()}.png`);
  });

  it('should verify total values are the same in the new window', async () => {
    // Open Ember POC Dashboard directly (if not already opened)
    await browser.url('https://xpf-secure.standardlife.co.uk/secure/customer-platform/dashboard/dual-ui');

    // Fetch total values again in the new instance
    const newTotalValueElement = await $('#pensionValue');
    const newInvestmentGrowthElement = await $('#pensionSecondValue');

    await expect(newTotalValueElement).toBeDisplayed();
    await expect(newInvestmentGrowthElement).toBeDisplayed();

    const newTotalValue = await newTotalValueElement.getText();
    const newInvestmentGrowth = await newInvestmentGrowthElement.getText();

    // Compare values with previously stored values
    console.log('New Total Value:', newTotalValue);
    console.log('New Investment Growth:', newInvestmentGrowth);

    expect(newTotalValue).toEqual(initialTotalValue);
    expect(newInvestmentGrowth).toEqual(initialInvestmentGrowth);

    console.log('âœ… Pension values match successfully between both windows!');
  });
});


const growthValue = await $('//span[contains(text(), "Growth")]/following-sibling::div').getText();
console.log("Captured Growth Value:", growthValue);